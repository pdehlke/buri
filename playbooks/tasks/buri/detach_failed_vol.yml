---
# ebs_volume_id:

- name: Identify mount to tear down
  shell: "df | grep {{ buri_disk_device }} | awk '{ print $6 }'"
  register: old_mount
  #ignore_errors: yes

- name: Unmount /proc filesystem from chroot
  command: 'chroot {{ old_mount.stdout }} umount /proc'
  ignore_errors: yes
  # with_items: old_mount.stdout
  when: old_mount.stdout != ""

- name: Unmount /dev filesystem from chroot
  command: 'umount {{ old_mount.stdout }}/dev'
  ignore_errors: yes
  # with_items: old_mount.stdout
  when: old_mount.stdout != ""

- name: Unmount EBS volume for chroot
  command: 'umount {{ old_mount.stdout }}'
  # with_items: old_mount.stdout
  when: old_mount.stdout != ""

- name: Discover Volume ID to detatch
  shell: "aws ec2 describe-instances --instance-ids {{ ansible_ec2_instance_id }} --region {{ ansible_ec2_placement_region }} --output text | grep -A1 BLOCKDEVICEMAPPINGS | grep -A1 {{ buri_disk_device.replace('/dev/xvd', '/dev/sd') }} | grep EBS"
  register: ebsvol

- name: Saving Volume ID as a fact for later use
  set_fact:
    ebs_volume_id: "{{ ebsvol.stdout.split('\t')[4] }}"
    # with_items: ebsvol.stdout

- name: Detatch failed working volume
  command: 'aws ec2 detach-volume --region {{ ansible_ec2_placement_region }} --volume-id {{ ebs_volume_id }}'

- name: Waiting for completion of volume detatch
  command: 'aws ec2 describe-volumes --region {{ ansible_ec2_placement_region }} --volume-ids {{ ebs_volume_id }} --output text'
  register: result
  until: result.stdout.find("ATTACHMENT") == -1
  retries: 30
  delay: 3

- name: Delete EBS working volume
  command: 'aws ec2 delete-volume --region {{ ansible_ec2_placement_region }} --volume-id {{ ebs_volume_id }}'

